

/*
"WORLD_COUNTRIES": {
  "ITEM_ID": "7d721e9b74bf4b16bd43dfe489a5a533",
  "ISO_FIELD": "ISO_2DIGIT",
  "LABEL_FIELD": "NAME"
},
//geometryPrecision: 0,
//maxAllowableOffset: 10000,
 */


/*
const largestPart = polygon => {

        const ringsAsPolygonsInfos = polygon.rings.map(ring => {
          const ringAsPolygon = new Polygon({ spatialReference: polygon.spatialReference, rings: [ring] });
          return { geometry: ringAsPolygon, area: geometryEngine.geodesicArea(polygon, 'square-meters') }
        });

        const largestPolygonInfo = ringsAsPolygonsInfos.reduce((largestInfo, polygonInfo) => {
          return (polygonInfo.area > largestInfo.area) ? polygonInfo : largestInfo;
        }, { geometry: null, area: -Infinity });

        return largestPolygonInfo.geometry;
      };
 */


/*initializeCountriesLayer_prev: function(view){

      // COUNTRY LAYERS INFO //
      const countryLayerInfos = {
        "WORLD_COUNTRIES_GENERALIZED": {
          "ITEM_ID": "2b93b06dc0dc4e809d3c8db5cb96ba69",
          "ISO_FIELD": "ISO",
          "LABEL_FIELD": "Country"
        },
        "WORLD_COUNTRIES": {
          "ITEM_ID": "8de74fd8ba484e0ba2c0af9f32b08a1a",
          "ISO_FIELD": "ISO_2DIGIT",
          "LABEL_FIELD": "NAME"
        },
        "WORLD_COUNTRIES_VIZ": {
          "ITEM_ID": "3c7c5f75cc184a4ca89fe9c8c2154da5",
          "ISO_FIELD": "GID_0",
          "LABEL_FIELD": "NAME_0"
        }
      };

      // COUNTRY LAYER INFO //
      const countryLayerInfo = countryLayerInfos.WORLD_COUNTRIES_VIZ;

      let countryGeometryByISOCode = null;

      const polygonToPolyline = polygon => {
        return new Polyline({
          spatialReference: polygon.spatialReference,
          paths: polygon.rings
        });
      };


      //
      // OCEANS LAYER //
      //
      /!*Layer.fromPortalItem({ portalItem: { id: "ad70952edf6248189c9abceb15bb4f3f" } }).then(oceansLayer => {
        oceansLayer.load().then(() => {

          oceansLayer.currentStyleInfo.style.layers.forEach(styleLayer => {
            if(styleLayer.layout.visibility !== "none"){
              //console.info(styleLayer)
              const layoutProperties = oceansLayer.getPaintProperties(styleLayer.id);
              layoutProperties["fill-color"] = this.countryFillColor;
              oceansLayer.setPaintProperties(styleLayer.id, layoutProperties);
            }
          });

          //view.map.layers.add(oceansLayer);
        });
      });*!/


      //
      // LOAD COUNTRIES LAYER //
      //
      return Layer.fromPortalItem({ portalItem: { id: countryLayerInfo.ITEM_ID } }).then(countriesLayer => {
        return countriesLayer.load().then(() => {

          countriesLayer.outFields = ["*"];
          countriesLayer.definitionExpression = `${countryLayerInfo.ISO_FIELD} <> '${this.initialCountryISOCode}'`;
          countriesLayer.renderer = {
            type: "simple",
            symbol: {
              type: "simple-fill",
              style: "solid",
              color: this.countryFillColor,
              outline: {
                style: "solid",
                color: this.countryOutlineColor,
                size: 10.0
              }
            }
          };
          //view.map.layers.add(countriesLayer);

          const meshFillSymbol = {
            type: "fill",
            castShadows: true,
            material: { color: this.wallColor },
            edges: {
              type: "solid",
              color: this.wallColor,
              size: 5.0
            }
          };

          /!*const borderGraphic = new Graphic({
            symbol: {
              type: "line-3d",
              symbolLayers: [{
                type: "path",
                anchor: "top",
                profile: "quad",
                profileRotation: "heading",
                castShadows: true,
                cap: "round",
                width: 100,
                height: 10000,
                material: { color: this.wallColor }
              }]
            }
          });*!/

          const borderGraphic = new Graphic({
            symbol: {
              type: "mesh-3d",
              symbolLayers: [meshFillSymbol]
            }
          });

          // MASK GRAPHIC //
          /!*const maskGraphic = new Graphic({
            symbol: {
              type: "simple-fill",
              color: this.themeColor,
              style: "solid",
              outline: {
                color: this.themeColor,
                style: "solid",
                width: 2.2
              }
            }
          });*!/

          const maskGraphic = new Graphic({
            symbol: {
              type: "mesh-3d",
              symbolLayers: [meshFillSymbol]
            }
          });

          const extentGraphic = new Graphic({
            symbol: {
              type: "simple-fill",
              color: 'rgba(0,0,0,0)',
              style: "solid",
              outline: {
                color: 'red',
                style: "solid",
                width: 2.2
              }
            }
          });


          // MASK AND BORDER LAYER //
          const maskLayer = new GraphicsLayer({ graphics: [extentGraphic, borderGraphic, maskGraphic] });
          //view.map.add(maskLayer);


          const bottomElevation = -200000.0;

          const createNormalizedExtent = extent => {

            maskLayer.add({
              geometry: extent,
              symbol: extentGraphic.symbol.clone()
            });

            const minPnt = new Point({
              spatialReference: extent.spatialReference,
              x: extent.xmin, y: extent.ymin
            });
            const maxPnt = new Point({
              spatialReference: extent.spatialReference,
              x: extent.xmax, y: extent.ymax
            });
            //console.info(minPnt.longitude, maxPnt.longitude);

            const normalized_extent = new Extent({
              spatialReference: { wkid: 4326 },
              xmin: minPnt.longitude, ymin: minPnt.latitude,
              xmax: maxPnt.longitude, ymax: maxPnt.latitude,
            });

            const midLongitude = (minPnt.longitude + ((maxPnt.longitude - minPnt.longitude) * 0.5));
            view.spatialReference = this.createShiftedWebMercator(midLongitude);

            const normalized_parts = normalized_extent.clone().normalize();

            normalized_parts.forEach(normalized_part => {
              maskLayer.add({
                geometry: normalized_part,
                symbol: extentGraphic.symbol.clone()
              });
            });

            //extentGraphic.geometry = normalizedExtent;

            const normalizedExtent = (normalized_parts.length > 1) ? normalized_parts[1] : normalized_parts[0];
            console.info('createNormalizedExtent: ', normalized_parts.length, normalized_parts);

            return normalizedExtent
          };

          const createBorderMesh = (border) => {

            const dim = Math.max(view.extent.width, view.extent.height);
            const borderD = geometryEngine.densify(border, dim / 100, "meters");
            const borderDO = geometryEngine.offset(borderD, -1000, "meters", "round");
            const borderDOZ = this.interpolateShape(borderDO);

            return this.createExtrudedMesh(borderDOZ, bottomElevation);

          };

          /!**
           *
           * @param countryISOCode
           *!/
          let updateId = 0;
          let samplerChangeHandle = null;
          this.filterByCountryISO = async(countryISOCode) => {

            //countriesLayer.definitionExpression = `${countryLayerInfo.ISO_FIELD} <> '${countryISOCode}'`;

            // COUNTRY GEOMETRY //
            //let countryGeometry = countryGeometryByISOCode.get(countryISOCode);

            let { countryExtent_normalized, countryExtentBorder } = countryGeometryByISOCode.get(countryISOCode);

            //countryGeometry = geometryEngine.geodesicDensify(countryGeometry, 1000, "meters");
            //countryGeometry = geometryEngine.geodesicBuffer(countryGeometry, 100, "meters", true);
            // COUNTRY BORDER //
            // const countryBorder = polygonToPolyline(countryGeometry);
            // let countryBorderZ = this.interpolateShape(countryBorder);
            // borderGraphic.geometry = this.createExtrudedMesh(countryBorderZ, bottomElevation);

            // BORDER GRAPHIC //
            //borderGraphic.geometry = this.interpolateShape(countryBorder);

            //
            // COUNTRY EXTENT //
            //

            // const countryExtent = countryGeometry.extent.clone().expand(1.1);
            // const countryExtent_normalized = createNormalizedExtent(countryExtent);

            // const countryExtentPoly = Polygon.fromExtent(countryExtent_normalized);
            // const countryExtentPolyB = geometryEngine.buffer(countryExtentPoly, 500, "meters");
            // const countryExtentBorder = polygonToPolyline(countryExtentPolyB);

            // UPDATE CLIPPING AREA //
            await this.updateViewClippingArea(countryExtent_normalized);

            //borderGraphic.geometry = createBorderMesh(countryExtentBorder);

            // EXTENT MASK //
            //const countryGeometry_buff = geometryEngine.geodesicBuffer(countryGeometry, 1000, "meters", true);
            //const countryExtent_diff = geometryEngine.difference(countryExtent_normalized, countryGeometry);
            //const countryExtent_diff_Z = this.setPolygonZ(countryExtent_diff, bottomElevation);

            // MASK GRAPHIC //
            //let countryMaskElev = this.interpolateShape(countryExtent_diff.clone());
            //let countryMaskElev = this.setPolygonZ(countryExtent_diff.clone(), bottomElevation);

            //let countryMaskMesh = Mesh.createFromPolygon(countryMaskElev);
            //maskGraphic.geometry = countryExtent_diff;
            //maskGraphic.geometry = Mesh.createFromPolygon(countryExtent_diff_Z);
            //maskGraphic.geometry = meshUtils.merge([countryBorderWall, countryMaskMesh]);
            //maskGraphic.geometry = countryBorderWall;

            /!*samplerChangeHandle && samplerChangeHandle.remove();
            samplerChangeHandle = this.on("elevation-sampler-changed", () => {
              if(!updateId){
                updateId = setTimeout(() => {
                  updateId = 0;


                  if(!geometryEngine.within(view.extent,countryExtentBorder.extent)){
                    borderGraphic.geometry = createBorderMesh(countryExtentBorder);
                  }

                  //borderGraphic.geometry = this.interpolateShape(countryBorder.clone());
                  //maskGraphic.geometry = countryExtent_diff_Z;
                  //maskGraphic.geometry = Mesh.createFromPolygon(countryExtent_diff_Z);

                  // countryBorderZ = this.interpolateShape(countryBorder);
                  // countryBorderWall = this.createExtrudedMesh(countryBorderZ, bottomElevation);

                  // countryBorderZ = this.interpolateShape(countryBorder);
                  // borderGraphic.geometry = this.createExtrudedMesh(countryBorderZ, bottomElevation);

                  //countryMaskElev = this.interpolateShape(countryExtent_diff.clone());
                  //countryMaskElev = this.setPolygonZ(countryExtent_diff.clone(), bottomElevation);
                  //countryMaskMesh = Mesh.createFromPolygon(countryMaskElev);
                  //maskGraphic.geometry = meshUtils.merge([countryBorderWall, countryMaskMesh]);
                  //maskGraphic.geometry = countryBorderWall;

                }, 0);
              }
            });*!/


          };

          // COUNTRY SELECT //
          const countrySelect = domConstruct.create("select");
          // view.ui.add(countrySelect, "top-right");
          // on(countrySelect, "change", () => {
          //   this.filterByCountryISO(countrySelect.value);
          // });

          // GET ALL COUNTRIES //
          const countriesQuery = countriesLayer.createQuery();
          countriesQuery.set({
            outSpatialReference: view.spatialReference,
            where: `${countryLayerInfo.ISO_FIELD} = '${this.initialCountryISOCode}'`,
            orderByFields: [countryLayerInfo.LABEL_FIELD],
            returnGeometry: true//,
            // geometryPrecision: 0,
            // maxAllowableOffset: 1000
          });

          countriesLayer.queryFeatures(countriesQuery).then(countriesFS => {
            console.info(countriesFS.features);

            countryGeometryByISOCode = countriesFS.features.reduce((list, feature, featureIdx) => {

              /!*maskLayer.add({
                geometry: feature.geometry.extent.clone(),
                symbol: extentGraphic.symbol.clone()
              });*!/

              const isoCode = feature.attributes[countryLayerInfo.ISO_FIELD];
              //const countryLabel = feature.attributes[countryLayerInfo.LABEL_FIELD];

              /!* domConstruct.create("option", {
                 innerHTML: countryLabel,
                 value: isoCode,
                 selected: (isoCode === this.initialCountryISOCode)
               }, countrySelect);*!/


              const countryExtent_normalized = createNormalizedExtent(feature.geometry.extent.clone().expand(1.1));
              const countryExtentPoly = Polygon.fromExtent(countryExtent_normalized);
              //const countryExtentPoly = geometryEngine.buffer(countryExtent_normalized, 500, "meters");
              const countryExtentBorder = polygonToPolyline(countryExtentPoly);

              // UNION ALL COUNTRY GEOMETRIES //
              /!*const countryGeometry = list.get(isoCode);
              if(countryGeometry){
                list.set(isoCode, geometryEngine.union([countryGeometry, feature.geometry]));
              } else {
                list.set(isoCode, feature.geometry)
              }*!/

              list.set(isoCode, { countryExtent_normalized, countryExtentBorder });

              return list;
            }, new Map());

            // SELECT INITIAL COUNTRY //
            //this.filterByCountryISO(countrySelect.value);
            this.filterByCountryISO(this.initialCountryISOCode);

          });

          return countriesLayer;
        });
      });

    },*/

/*
createShiftedWebMercator: function(newCentralMeridian){
  // https://github.com/Esri/projection-engine-db-doc
  return new SpatialReference({
    "wkt": `PROJCS[\"WGS_1984_Web_Mercator_Auxiliary_Sphere\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mercator_Auxiliary_Sphere\"],PARAMETER[\"False_Easting\",0.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",${newCentralMeridian}],PARAMETER[\"Standard_Parallel_1\",0.0],PARAMETER[\"Auxiliary_Sphere_Type\",0.0],UNIT[\"Meter\",1.0]]`
  });
}
*/

/*initializeView: function(exaggeratedElevationLayer, blendBasemapLayer){


  const defaultBaseLayer = new MapImageLayer({ url: "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer" });


  //ground: "world-topobathymetry",  // world-elevation   world-topobathymetry"

  // MAP //
  const map = new EsriMap({
    //ground: "world-elevation",
    //ground: { layers: [exaggeratedElevationLayer] },
    //basemap: "satellite",
    //basemap: new Basemap({ baseLayers: [blendBasemapLayer] })
    basemap: new Basemap({ baseLayers: [defaultBaseLayer] })
    //layers: [blendLayer]
  });


  //
  // https://github.com/Esri/projection-engine-db-doc
  //
  this.createShiftedWebMercator = (newCentralMeridian) => {
    return new SpatialReference({
      "wkt": `PROJCS[\"WGS_1984_Web_Mercator_Auxiliary_Sphere\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Mercator_Auxiliary_Sphere\"],PARAMETER[\"False_Easting\",0.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",${newCentralMeridian}],PARAMETER[\"Standard_Parallel_1\",0.0],PARAMETER[\"Auxiliary_Sphere_Type\",0.0],UNIT[\"Meter\",1.0]]`
    });
  };

  // VIEW //
  const view = new SceneView({
    container: "view-container",
    map: map,
    viewingMode: "local",
    spatialReference: this.createShiftedWebMercator(0.0),
    environment: {
      atmosphere: null,
      starsEnabled: false,
      background: {
        type: "color",
        color: this.themeColor
      }
    }
  });

  return view.when(() => {

    //view.map.ground.opacity = 0.9;
    view.map.ground.surfaceColor = this.surfaceColor;

    return watchUtils.whenNotOnce(view, "updating").then(() => {

      /!**
       *
       * @param countryExtent
       *!/
      this.updateViewClippingArea = async(countryExtent) => {

        if(view.viewingMode === "local"){
          view.clippingArea = countryExtent;
        }

        return view.goTo({ target: countryExtent, tilt: 40, heading: 45 }, { animate: false }).then(() => {
          return watchUtils.whenNotOnce(view, "updating");
        });
      };

      return view;
    });
  });

}*/


/**
     *
     * @param polygon
     * @param newZ
     * @returns {*}
     */
    setPolygonZ: function(polygon, newZ){

      polygon.hasZ = true;

      polygon.rings = polygon.rings.map(ring => {
        return ring.map(coords => {
          return coords.concat(newZ);
        });
      });

      return polygon;
    },

    /**
     * https://github.com/jkieboom/devsummit-palm-springs-2018/blob/master/demos/tectonic/js/PlateBoundaryLayer.ts
     *
     * Create an extruded mesh geometry along the line. This method
     * assumes the line has z-values that coincide with the ground
     * surface.
     *
     * @param line the line.
     * @param height
     */
    createExtrudedMesh: function(line, height){

      const meshes = line.paths.map(path => {
        return this._createExtrudedMesh(path, line.spatialReference, height);
      });

      return meshUtils.merge(meshes);
    },

    /**
     * https://github.com/jkieboom/devsummit-palm-springs-2018/blob/master/demos/tectonic/js/PlateBoundaryLayer.ts
     *
     * Create an extruded mesh geometry along the line path. This method
     * assumes the line has z-values that coincide with the ground
     * surface.
     *
     * @param path
     * @param spatialReference
     * @param height
     */
    _createExtrudedMesh: function(path, spatialReference, height){

      const position = this.createExtrudedPositionAttribute(path, height);

      const nSegments = (path.length - 1);
      const faces = new Uint32Array(nSegments * 2 * 3);
      let facePtr = 0;
      let vertexPtr = 0;

      // Create two triangle faces between each consecutive
      // pair of vertices in the line.
      for(let segmentIdx = 0; segmentIdx < nSegments; segmentIdx++){
        faces[facePtr++] = vertexPtr;
        faces[facePtr++] = vertexPtr + 3;
        faces[facePtr++] = vertexPtr + 1;

        faces[facePtr++] = vertexPtr;
        faces[facePtr++] = vertexPtr + 2;
        faces[facePtr++] = vertexPtr + 3;

        vertexPtr += 2;
      }

      return new Mesh({
        vertexAttributes: { position },
        components: [{ faces }],
        spatialReference: spatialReference
      });
    },

    /**
     * https://github.com/jkieboom/devsummit-palm-springs-2018/blob/master/demos/tectonic/js/PlateBoundaryLayer.ts
     *
     * Create the extruded vertex position attribute for
     * a given line path. The line is expected to have z-values
     * that coincide with the ground surface. The line is
     * extruded upwards by [height](#height).
     *
     * @param path
     * @param height
     */
    createExtrudedPositionAttribute: function(path, height){

      const position = new Float64Array(path.length * 2 * 3);
      let positionPtr = 0;

      for(let coordsIdx = 0; coordsIdx < path.length; coordsIdx++){
        position[positionPtr++] = path[coordsIdx][0];
        position[positionPtr++] = path[coordsIdx][1];
        position[positionPtr++] = path[coordsIdx][2];

        position[positionPtr++] = path[coordsIdx][0];
        position[positionPtr++] = path[coordsIdx][1];
        position[positionPtr++] = height; //path[coordsIdx][2] + height;
      }

      return position;
    }

     /**
         *
         * @param view
         */
        initializeElevationSampler: function(view){

          view.groundView.elevationSampler.on("changed", () => {
            watchUtils.whenNotOnce(view.groundView, "updating").then(() => {
              this.emit("elevation-sampler-changed", {});
            });
          });

          this.interpolateShape = (geometry) => {
            return view.groundView.elevationSampler.queryElevation(geometry);
          };

        },

